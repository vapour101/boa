(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; RefUnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; RefUnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl RefUnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colour","synthetic":true,"types":[]}];
implementors["boa"] = [{"text":"impl !RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Array","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ArrayIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrayIterationKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryFromF64Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Boolean","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Console","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EvalError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferenceError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyntaxError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UriError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuiltInFunction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuiltInFunctionObject","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Function","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalThis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Infinity","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IteratorPrototypes","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IteratorRecord","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IteratorResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Json","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Map","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for OrderedMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Math","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegExp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for String","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StringIterator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WellKnownSymbols","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Undefined","synthetic":true,"types":[]},{"text":"impl&lt;'context&gt; !RefUnwindSafe for ClassBuilder&lt;'context&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DeclarativeEnvironmentRecordBinding","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DeclarativeEnvironmentRecord","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FunctionEnvironmentRecord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindingStatus","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GlobalEnvironmentRecord","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LexicalEnvironment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnvironmentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnvironmentType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VariableScope","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ObjectEnvironmentRecord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interpreter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterpreterState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecursionLimiter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SymbolProperties&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SymbolPropertyKeys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SymbolPropertyValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for IndexProperties&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for IndexPropertyKeys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for IndexPropertyValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StringProperties&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StringPropertyKeys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StringPropertyValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FunctionBinding","synthetic":true,"types":[]},{"text":"impl&lt;'context&gt; !RefUnwindSafe for FunctionBuilder&lt;'context&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'context&gt; !RefUnwindSafe for ObjectInitializer&lt;'context&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'context&gt; !RefUnwindSafe for ConstructorBuilder&lt;'context&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ObjectData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BorrowError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BorrowMutError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FunctionBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecursionValueState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoaProfiler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataDescriptor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AccessorDescriptor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PropertyDescriptor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PropertyKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Realm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeywordError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Keyword","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormalParameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PropertyDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodDefinitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrayDecl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Call","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConditionalOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowFunctionDecl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstDeclList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstDecl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionDecl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LetDeclList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LetDecl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarDeclList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarDecl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetConstField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DoWhileLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InnerForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForOfLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhileLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for New","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Assign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spread","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatementList","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RcStatementList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Case","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Switch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Throw","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Catch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Finally","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NumOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punctuator","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Lexer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputElement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SingleLineComment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiLineComment","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Cursor&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for InnerIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NumberLiteral","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NumericKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Operator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexLiteral","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegExpFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpreadLiteral","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringLiteral","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringTerminator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TemplateLiteral","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowIn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowDefault","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Parser&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Script","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScriptBody","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Cursor&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for SemicolonResult&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufferedLexer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicalORExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicalANDExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitwiseORExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitwiseXORExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitwiseANDExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqualityExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelationalExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShiftExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdditiveExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiplicativeExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssignmentExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowFunction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConciseBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpressionBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConditionalExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExponentiationExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeftHandSideExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemberExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimaryExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrayLiteral","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLiteral","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PropertyDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Initializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormalParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindingRestElement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormalParameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionStatementList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatementList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatementListItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindingIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BreakStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContinueStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Declaration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HoistableDeclaration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionDeclaration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexicalDeclaration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindingList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexicalBinding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpressionStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DoWhileStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhileStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LabelledStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SwitchStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThrowStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Catch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CatchParameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Finally","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VariableStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VariableDeclarationList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VariableDeclaration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryFromCharError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryFromObjectError","synthetic":true,"types":[]},{"text":"impl&lt;'value&gt; !RefUnwindSafe for ValueDisplay&lt;'value&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RcBigInt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RcString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RcSymbol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbstractRelation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreferredType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UndefinedHashable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullHashable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RationalHashable","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StandardConstructor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StandardObjects","synthetic":true,"types":[]}];
implementors["boa_tester"] = [{"text":"impl RefUnwindSafe for Cli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Harness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestSuite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SuiteResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Test","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Locale","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestOutcomeResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Outcome","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Phase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Negative","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResultInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReducedResultInfo","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; RefUnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseMonthError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AppSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["colored"] = [{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColoredString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Styles","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShouldColorize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHOULD_COLORIZE","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl RefUnwindSafe for FxHasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FxHasher64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FxHasher32","synthetic":true,"types":[]}];
implementors["gc"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Gc&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for GcCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BorrowError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BorrowMutError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for GcCellRef&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for GcCellRefMut&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["git2"] = [{"text":"impl&lt;'cb&gt; !RefUnwindSafe for ApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Blame&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; RefUnwindSafe for BlameHunk&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; RefUnwindSafe for BlameIter&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlameOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Blob&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for BlobWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Branch&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Branches&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buf","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for CherrypickOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Commit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'commit, 'repo&gt; RefUnwindSafe for Parents&lt;'commit, 'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; RefUnwindSafe for ConfigEntries&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; RefUnwindSafe for ConfigEntry&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CredentialHelper","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Describe&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescribeFormatOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescribeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'diff&gt; RefUnwindSafe for Deltas&lt;'diff&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Diff&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffDelta&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffBinaryFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffFindOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffHunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffLine&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffStats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexConflict","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; RefUnwindSafe for IndexConflicts&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; RefUnwindSafe for IndexEntries&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Progress&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'odb&gt; RefUnwindSafe for Mempack&lt;'odb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for AnnotatedCommit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Note&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Notes&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Object&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Odb&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OdbObject&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !RefUnwindSafe for OdbPackwriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for OdbReader&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for OdbWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Oid","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !RefUnwindSafe for PackBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'buffers&gt; RefUnwindSafe for Patch&lt;'buffers&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pathspec","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; RefUnwindSafe for PathspecFailedEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ps&gt; RefUnwindSafe for PathspecMatchList&lt;'ps&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; RefUnwindSafe for PathspecDiffEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; RefUnwindSafe for PathspecEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ProxyOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Rebase&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'rebase&gt; RefUnwindSafe for RebaseOperation&lt;'rebase&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for RebaseOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Reference&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'references&gt; RefUnwindSafe for ReferenceNames&lt;'repo, 'references&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for References&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reflog","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; RefUnwindSafe for ReflogEntry&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; RefUnwindSafe for ReflogIter&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; RefUnwindSafe for Refspec&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for FetchOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for PushOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; RefUnwindSafe for Refspecs&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Remote&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'connection, 'cb&gt; !RefUnwindSafe for RemoteConnection&lt;'repo, 'connection, 'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; RefUnwindSafe for RemoteHead&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RemoteCallbacks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repository","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepositoryInitOptions","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for RevertOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Revspec&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Revwalk&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Signature&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for StashApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; RefUnwindSafe for StatusEntry&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; RefUnwindSafe for StatusIter&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Statuses&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Submodule&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for SubmoduleUpdateOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Tag&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Tree&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; RefUnwindSafe for TreeEntry&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; RefUnwindSafe for TreeIter&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for TreeBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sort","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CredentialType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexEntryFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexEntryExtendedFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexAddOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepositoryOpenFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RevparseMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergeAnalysis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergePreference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepositoryInitMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmoduleStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathspecFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckoutNotificationType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffStatsFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StashApplyFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StashFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrCheckFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ApplyLocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffBinaryKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PackBuilderStage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RebaseOperationType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusShow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TreeWalkMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TreeWalkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepositoryState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResetType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferenceType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BranchType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileFavor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmoduleIgnore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AutotagOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FetchPrune","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StashApplyProgress","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for RepoBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for CheckoutBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloneLocal","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CertHostkey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CertX509&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OidArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Service","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl RefUnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; RefUnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["libgit2_sys"] = [{"text":"impl RefUnwindSafe for git_revspec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_oid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_strarray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_oidarray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_clone_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_checkout_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_checkout_perfdata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_indexer_progress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_remote_callbacks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_fetch_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_push_update","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_cert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_cert_hostkey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_cert_x509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_file","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_status_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_delta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_status_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_buf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_blame_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_blame_hunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_index_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_index_time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_config_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_submodule_update_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_writestream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_cred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_push_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_repository_init_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_remote_head","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_hunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_line","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_find_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_similarity_metric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_format_email_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_binary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_binary_file","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_merge_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_transport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_odb_backend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_odb_writepack","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_refdb_backend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_proxy_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_smart_subtransport_stream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_smart_subtransport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_smart_subtransport_definition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_describe_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_describe_format_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_stash_apply_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_rebase_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_rebase_operation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_cherrypick_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_apply_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_blob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_branch_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_blame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_commit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_config_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_index_conflict_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_reference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_reference_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_annotated_commit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_refdb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_refspec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_remote","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_repository","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_revwalk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_submodule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_tree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_tree_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_treebuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_push","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_note","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_note_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_status_list","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_pathspec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_pathspec_match_list","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_stats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_patch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_rebase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_reflog","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_reflog_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_describe_result","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_packbuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_odb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_odb_stream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_odb_object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_worktree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]}];
implementors["libssh2_sys"] = [{"text":"impl RefUnwindSafe for libssh2_struct_stat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for libssh2_agent_publickey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for libssh2_knownhost","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SFTP_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SFTP_STATVFS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_AGENT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_CHANNEL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_LISTENER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_KNOWNHOSTS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SFTP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SFTP_HANDLE","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl RefUnwindSafe for gz_header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for z_stream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gzFile_s","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for internal_state","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl RefUnwindSafe for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sign","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl RefUnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;RefUnwindSafe + UnwindSafe&gt; RefUnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl RefUnwindSafe for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl RefUnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl RefUnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; RefUnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; RefUnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["regress"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; RefUnwindSafe for Groups&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Regex","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl RefUnwindSafe for FxHasher","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; RefUnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; RefUnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serializer","synthetic":true,"types":[]}];
implementors["serde_yaml"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mapping","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl RefUnwindSafe for StrSimError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindStyle","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl RefUnwindSafe for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; RefUnwindSafe for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl RefUnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNormalized","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl RefUnwindSafe for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; RefUnwindSafe for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wasm_bindgen"] = [{"text":"impl RefUnwindSafe for JsValue","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for JsStatic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Clamped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmOptionalI32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmOptionalU32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmOptionalF32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmOptionalF64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Wasm64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmOptional64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmSlice","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for Closure&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wasm_bindgen_backend"] = [{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Program","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Export","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Import","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportFunction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Operation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Function","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StructField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportModule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportFunctionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OperationKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeLocation","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ShortHash&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wasm_bindgen_macro_support"] = [{"text":"impl !RefUnwindSafe for BindgenAttrs","synthetic":true,"types":[]}];
implementors["yaml_rust"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for YamlEmitter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmitError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parser&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Marker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Scanner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TScalarStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for YamlLoader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for YamlIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yaml","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()