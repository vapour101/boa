(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; UnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; UnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; UnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl UnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; UnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; UnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colour","synthetic":true,"types":[]}];
implementors["boa"] = [{"text":"impl !UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Array","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ArrayIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrayIterationKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryFromF64Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Boolean","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Console","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EvalError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferenceError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyntaxError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UriError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuiltInFunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuiltInFunctionObject","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Function","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalThis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Infinity","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IteratorPrototypes","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IteratorRecord","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IteratorResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Json","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Map","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; UnwindSafe for OrderedMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Math","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegExp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for String","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StringIterator","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WellKnownSymbols","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Undefined","synthetic":true,"types":[]},{"text":"impl&lt;'context&gt; !UnwindSafe for ClassBuilder&lt;'context&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DeclarativeEnvironmentRecordBinding","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DeclarativeEnvironmentRecord","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FunctionEnvironmentRecord","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindingStatus","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GlobalEnvironmentRecord","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LexicalEnvironment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnvironmentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnvironmentType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VariableScope","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ObjectEnvironmentRecord","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interpreter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterpreterState","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GcObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecursionLimiter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SymbolProperties&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SymbolPropertyKeys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SymbolPropertyValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IndexProperties&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IndexPropertyKeys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IndexPropertyValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for StringProperties&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for StringPropertyKeys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for StringPropertyValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FunctionBinding","synthetic":true,"types":[]},{"text":"impl&lt;'context&gt; !UnwindSafe for FunctionBuilder&lt;'context&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'context&gt; !UnwindSafe for ObjectInitializer&lt;'context&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'context&gt; !UnwindSafe for ConstructorBuilder&lt;'context&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ObjectData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BorrowError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BorrowMutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecursionValueState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoaProfiler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DataDescriptor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AccessorDescriptor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PropertyDescriptor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PropertyKey","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Realm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeywordError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Keyword","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormalParameter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PropertyDefinition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodDefinitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrayDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Call","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConditionalOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrowFunctionDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstDeclList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionExpr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LetDeclList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LetDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarDeclList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetConstField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DoWhileLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InnerForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForOfLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhileLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for New","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spread","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatementList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcStatementList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Case","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Switch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Throw","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Catch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Finally","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NumOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punctuator","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Lexer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputElement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SingleLineComment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultiLineComment","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Cursor&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for InnerIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NumberLiteral","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NumericKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Operator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexLiteral","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegExpFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpreadLiteral","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringLiteral","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringTerminator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TemplateLiteral","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowIn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowDefault","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Parser&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Script","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScriptBody","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Cursor&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; UnwindSafe for SemicolonResult&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BufferedLexer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicalORExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicalANDExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitwiseORExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitwiseXORExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitwiseANDExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqualityExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RelationalExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShiftExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdditiveExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultiplicativeExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssignmentExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrowFunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConciseBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpressionBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConditionalExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExponentiationExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeftHandSideExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CallExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemberExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrimaryExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrayLiteral","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLiteral","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PropertyDefinition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodDefinition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Initializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnaryExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormalParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindingRestElement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormalParameter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionStatementList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Statement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatementList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatementListItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindingIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BreakStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContinueStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Declaration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HoistableDeclaration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionDeclaration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexicalDeclaration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindingList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexicalBinding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpressionStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DoWhileStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhileStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LabelledStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SwitchStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThrowStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Catch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CatchParameter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Finally","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VariableStatement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VariableDeclarationList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VariableDeclaration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryFromCharError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryFromObjectError","synthetic":true,"types":[]},{"text":"impl&lt;'value&gt; !UnwindSafe for ValueDisplay&lt;'value&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcBigInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcString","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RcSymbol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbstractRelation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreferredType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UndefinedHashable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NullHashable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RationalHashable","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StandardConstructor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StandardObjects","synthetic":true,"types":[]}];
implementors["boa_tester"] = [{"text":"impl UnwindSafe for Cli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Harness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestSuite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SuiteResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Test","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Locale","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestOutcomeResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Outcome","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Phase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Negative","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResultInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReducedResultInfo","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; UnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; UnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseMonthError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AppSettings","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgSettings","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shell","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["colored"] = [{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColoredString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Styles","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShouldColorize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHOULD_COLORIZE","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl UnwindSafe for FxHasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FxHasher64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FxHasher32","synthetic":true,"types":[]}];
implementors["gc"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Gc&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for GcCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BorrowError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BorrowMutError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for GcCellRef&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for GcCellRefMut&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["git2"] = [{"text":"impl&lt;'cb&gt; !UnwindSafe for ApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Blame&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; UnwindSafe for BlameHunk&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; UnwindSafe for BlameIter&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlameOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Blob&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for BlobWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Branch&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Branches&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buf","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for CherrypickOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Commit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'commit, 'repo&gt; UnwindSafe for Parents&lt;'commit, 'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; UnwindSafe for ConfigEntries&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; UnwindSafe for ConfigEntry&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cred","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CredentialHelper","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Describe&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescribeFormatOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescribeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'diff&gt; UnwindSafe for Deltas&lt;'diff&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Diff&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffDelta&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffBinaryFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffFindOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffHunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffLine&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexConflict","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; UnwindSafe for IndexConflicts&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; UnwindSafe for IndexEntries&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Progress&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'odb&gt; UnwindSafe for Mempack&lt;'odb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for AnnotatedCommit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Note&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Notes&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Object&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Odb&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for OdbObject&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !UnwindSafe for OdbPackwriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for OdbReader&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for OdbWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Oid","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !UnwindSafe for PackBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'buffers&gt; UnwindSafe for Patch&lt;'buffers&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pathspec","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; UnwindSafe for PathspecFailedEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ps&gt; UnwindSafe for PathspecMatchList&lt;'ps&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; UnwindSafe for PathspecDiffEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; UnwindSafe for PathspecEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ProxyOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Rebase&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'rebase&gt; UnwindSafe for RebaseOperation&lt;'rebase&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for RebaseOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Reference&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'references&gt; !UnwindSafe for ReferenceNames&lt;'repo, 'references&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for References&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reflog","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; UnwindSafe for ReflogEntry&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; UnwindSafe for ReflogIter&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; UnwindSafe for Refspec&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for FetchOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for PushOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; UnwindSafe for Refspecs&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Remote&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'connection, 'cb&gt; !UnwindSafe for RemoteConnection&lt;'repo, 'connection, 'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; UnwindSafe for RemoteHead&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RemoteCallbacks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repository","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepositoryInitOptions","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for RevertOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Revspec&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Revwalk&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Signature&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for StashApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; UnwindSafe for StatusEntry&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; UnwindSafe for StatusIter&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Statuses&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Submodule&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for SubmoduleUpdateOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Tag&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Tree&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; UnwindSafe for TreeEntry&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; UnwindSafe for TreeIter&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for TreeBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sort","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CredentialType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexEntryFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexEntryExtendedFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexAddOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepositoryOpenFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RevparseMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergeAnalysis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergePreference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepositoryInitMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubmoduleStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathspecFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckoutNotificationType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffStatsFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StashApplyFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StashFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrCheckFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ApplyLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffBinaryKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackBuilderStage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RebaseOperationType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusShow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TreeWalkMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TreeWalkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepositoryState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResetType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferenceType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BranchType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileFavor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubmoduleIgnore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AutotagOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FetchPrune","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StashApplyProgress","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for RepoBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for CheckoutBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloneLocal","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CertHostkey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CertX509&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OidArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IterBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Service","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl UnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; UnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; UnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["libgit2_sys"] = [{"text":"impl UnwindSafe for git_revspec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_oid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_strarray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_oidarray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_clone_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_checkout_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_checkout_perfdata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_indexer_progress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_remote_callbacks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_fetch_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_push_update","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_cert","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_cert_hostkey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_cert_x509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_file","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_status_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_delta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_status_entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_buf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_blame_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_blame_hunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_index_entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_index_time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_config_entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_submodule_update_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_writestream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_cred","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_push_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_repository_init_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_remote_head","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_hunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_line","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_find_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_similarity_metric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_format_email_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_binary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_binary_file","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_merge_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_transport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_odb_backend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_odb_writepack","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_refdb_backend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_proxy_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_smart_subtransport_stream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_smart_subtransport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_smart_subtransport_definition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_describe_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_describe_format_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_stash_apply_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_rebase_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_rebase_operation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_cherrypick_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_apply_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_blob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_branch_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_blame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_commit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_config_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_index_conflict_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_reference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_reference_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_annotated_commit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_refdb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_refspec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_remote","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_repository","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_revwalk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_submodule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_tree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_tree_entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_treebuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_push","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_note","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_note_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_status_list","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_pathspec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_pathspec_match_list","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_stats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_patch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_rebase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_reflog","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_reflog_entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_describe_result","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_packbuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_odb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_odb_stream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_odb_object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_worktree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]}];
implementors["libssh2_sys"] = [{"text":"impl UnwindSafe for libssh2_struct_stat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for libssh2_agent_publickey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for libssh2_knownhost","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SFTP_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SFTP_STATVFS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_AGENT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_CHANNEL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_LISTENER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_KNOWNHOSTS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SFTP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SFTP_HANDLE","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl UnwindSafe for gz_header","synthetic":true,"types":[]},{"text":"impl UnwindSafe for z_stream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gzFile_s","synthetic":true,"types":[]},{"text":"impl UnwindSafe for internal_state","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; UnwindSafe for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for Entries&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; UnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for VacantEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl UnwindSafe for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sign","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;UnwindSafe&gt; UnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl UnwindSafe for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl UnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl UnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl UnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl UnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpanRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl UnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; UnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; UnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; UnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl UnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["regress"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; UnwindSafe for Groups&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl UnwindSafe for FxHasher","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; UnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; UnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; UnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Serializer","synthetic":true,"types":[]}];
implementors["serde_yaml"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mapping","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl UnwindSafe for StrSimError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; UnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindStyle","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl UnwindSafe for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; UnwindSafe for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !UnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl UnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; UnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNormalized","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl UnwindSafe for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; UnwindSafe for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for VacantEntry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for OccupiedEntry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for IterMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for ValuesMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for Entry&lt;'a, V&gt;","synthetic":true,"types":[]}];
implementors["wasm_bindgen"] = [{"text":"impl UnwindSafe for JsValue","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for JsStatic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Clamped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmOptionalI32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmOptionalU32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmOptionalF32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmOptionalF64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Wasm64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmOptional64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmSlice","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Closure&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wasm_bindgen_backend"] = [{"text":"impl UnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Program","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Export","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Import","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportFunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Operation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Function","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StructField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportModule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportFunctionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OperationKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeLocation","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ShortHash&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wasm_bindgen_macro_support"] = [{"text":"impl UnwindSafe for BindgenAttrs","synthetic":true,"types":[]}];
implementors["yaml_rust"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for YamlEmitter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmitError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Parser&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Marker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Scanner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TScalarStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for YamlLoader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for YamlIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yaml","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()